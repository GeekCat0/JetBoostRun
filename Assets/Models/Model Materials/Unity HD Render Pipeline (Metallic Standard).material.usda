#usda 1.0
(
    "Exported from Adobe Substance 3D Painter 10.0.1"
    defaultPrim = "RootNode"
)

def "RootNode"
{
    def Scope "material"
    {
        def Material "FloorMaterial" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @C:/Program Files/Adobe/Adobe Substance 3D Painter/resources/starter_assets/templates/Unity HD Render Pipeline (Metallic Standard).spt@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_FloorMaterial_BaseMap.png@
            asset inputs:compositedAmbientOcclusion_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_FloorMaterial_MaskMap.png@
            asset inputs:compositedNormalGL_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_FloorMaterial_Normal.png@
            asset inputs:metallic_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_FloorMaterial_MaskMap.png@
            asset inputs:opacity_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_FloorMaterial_BaseMap.png@
            token outputs:displacement.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:metallic.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/metallicTextureShader.outputs:r>
                    normal3f inputs:normal.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/occlusionTextureShader.outputs:g>
                    float inputs:opacity.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/opacityTextureShader.outputs:a>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/FloorMaterial.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/FloorMaterial.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "opacityTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/FloorMaterial.inputs:opacity_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:a
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/FloorMaterial.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/FloorMaterial.inputs:compositedNormalGL_tex>
                    float4 inputs:scale = (2, 2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/FloorMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }
        }

        def Material "WallMaterial" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @C:/Program Files/Adobe/Adobe Substance 3D Painter/resources/starter_assets/templates/Unity HD Render Pipeline (Metallic Standard).spt@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_WallMaterial_BaseMap.png@
            asset inputs:compositedAmbientOcclusion_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_WallMaterial_MaskMap.png@
            asset inputs:compositedNormalGL_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_WallMaterial_Normal.png@
            asset inputs:metallic_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_WallMaterial_MaskMap.png@
            asset inputs:opacity_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_WallMaterial_BaseMap.png@
            token outputs:displacement.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:metallic.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/metallicTextureShader.outputs:r>
                    normal3f inputs:normal.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/occlusionTextureShader.outputs:g>
                    float inputs:opacity.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/opacityTextureShader.outputs:a>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/WallMaterial.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/WallMaterial.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "opacityTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/WallMaterial.inputs:opacity_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:a
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/WallMaterial.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/WallMaterial.inputs:compositedNormalGL_tex>
                    float4 inputs:scale = (2, 2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/WallMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }
        }

        def Material "PillarMaterial" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @C:/Program Files/Adobe/Adobe Substance 3D Painter/resources/starter_assets/templates/Unity HD Render Pipeline (Metallic Standard).spt@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_PillarMaterial_BaseMap.png@
            asset inputs:compositedAmbientOcclusion_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_PillarMaterial_MaskMap.png@
            asset inputs:compositedNormalGL_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_PillarMaterial_Normal.png@
            asset inputs:metallic_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_PillarMaterial_MaskMap.png@
            asset inputs:opacity_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_PillarMaterial_BaseMap.png@
            token outputs:displacement.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:metallic.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/metallicTextureShader.outputs:r>
                    normal3f inputs:normal.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/occlusionTextureShader.outputs:g>
                    float inputs:opacity.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/opacityTextureShader.outputs:a>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/PillarMaterial.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/PillarMaterial.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "opacityTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/PillarMaterial.inputs:opacity_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:a
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/PillarMaterial.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/PillarMaterial.inputs:compositedNormalGL_tex>
                    float4 inputs:scale = (2, 2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/PillarMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }
        }

        def Material "RoofMaterial" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @C:/Program Files/Adobe/Adobe Substance 3D Painter/resources/starter_assets/templates/Unity HD Render Pipeline (Metallic Standard).spt@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_RoofMaterial_BaseMap.png@
            asset inputs:compositedAmbientOcclusion_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_RoofMaterial_MaskMap.png@
            asset inputs:compositedNormalGL_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_RoofMaterial_Normal.png@
            asset inputs:metallic_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_RoofMaterial_MaskMap.png@
            asset inputs:opacity_tex = @Unity HD Render Pipeline (Metallic Standard)_textures/CorridorSection_RoofMaterial_BaseMap.png@
            token outputs:displacement.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:metallic.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/metallicTextureShader.outputs:r>
                    normal3f inputs:normal.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/occlusionTextureShader.outputs:g>
                    float inputs:opacity.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/opacityTextureShader.outputs:a>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/RoofMaterial.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/RoofMaterial.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "opacityTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/RoofMaterial.inputs:opacity_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:a
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/RoofMaterial.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, -1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/RoofMaterial.inputs:compositedNormalGL_tex>
                    float4 inputs:scale = (2, 2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/RoofMaterial/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }
        }
    }

    over "segment"
    {
        over "floor"
        {
            over "floor" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/FloorMaterial>
            }
        }

        over "wall"
        {
            over "wall" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/WallMaterial>
            }
        }

        over "pillar"
        {
            over "pillar" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/PillarMaterial>
            }
        }

        over "wall1"
        {
            over "wall1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/WallMaterial>
            }
        }

        over "pillar1"
        {
            over "pillar1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/PillarMaterial>
            }
        }

        over "floor1"
        {
            over "floor1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/FloorMaterial>
            }
        }

        over "roof"
        {
            over "roof" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/RoofMaterial>
            }
        }

        over "roof1"
        {
            over "roof1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/RoofMaterial>
            }
        }
    }

    over "segment1"
    {
        over "floor"
        {
            over "floor" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/FloorMaterial>
            }
        }

        over "wall"
        {
            over "wall" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/WallMaterial>
            }
        }

        over "pillar"
        {
            over "pillar" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/PillarMaterial>
            }
        }

        over "wall1"
        {
            over "wall1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/WallMaterial>
            }
        }

        over "pillar1"
        {
            over "pillar1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/PillarMaterial>
            }
        }

        over "floor1"
        {
            over "floor1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/FloorMaterial>
            }
        }

        over "roof"
        {
            over "roof" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/RoofMaterial>
            }
        }

        over "roof1"
        {
            over "roof1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/RoofMaterial>
            }
        }
    }

    over "segment2"
    {
        over "floor"
        {
            over "floor" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/FloorMaterial>
            }
        }

        over "wall"
        {
            over "wall" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/WallMaterial>
            }
        }

        over "pillar"
        {
            over "pillar" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/PillarMaterial>
            }
        }

        over "wall1"
        {
            over "wall1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/WallMaterial>
            }
        }

        over "pillar1"
        {
            over "pillar1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/PillarMaterial>
            }
        }

        over "floor1"
        {
            over "floor1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/FloorMaterial>
            }
        }

        over "roof"
        {
            over "roof" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/RoofMaterial>
            }
        }

        over "roof1"
        {
            over "roof1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/RoofMaterial>
            }
        }
    }
}

